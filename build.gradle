plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.flabedu.small'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

/**
 스프링 initializer에는 자바 선택에는 LTS 버전인 8, 11, 17과 비 LTS 버전인 최신 버전인 18(22.3)이 있다.
 우선 지원 기간이 긴 LTS 버전 중에서 택일하기로 한다.
 자바 8 vs 11
    * 자바 8에서 람다식, 함수형 인터페이스, Stream API, Optional 등 많은 기능이 추가되었다.
    * 자바 8의 Default GC는 parallel GC이고, 자바 11의 Default GC는 G1GC이다.
    * G1GC는 Heap을 Region이란 논리적 단위로 분할하여 관리하며, parallel GC에 비해 STW가 짧다.
    * 성능이 개선된 GC를 사용하기 위해 11 이상의 버전을 채택하도록 한다.
 자바 11 vs 17
    * 11과 17 버전을 선택함에 있어 많이 고민하였는데, JVM 구조의 변경이나 Default GC의 변화가 없다.
    * 17 버전은 라이브러리 호환 등에 문제가 있을 수 있지만 11에 비해 추가된 기능이 많고, 자바 15부터 Z GC가 사용이 가능하다.
    * 본 프로젝트의 목적은 학습한 내용을 적용해보는 것이므로, Z GC가 사용 가능한 자바 17을 채택하도록 한다.
 기타 (11 vs 17)
    * 향상된 switch 문 (정식채택 버전 14)
    * record (정식채택 버전 16)
    * sealed (버전 15)
    * 패턴 매칭 instanceof (버전 14)
 *
 */


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'junit:junit:4.13.1'
    implementation 'org.jetbrains:annotations:20.1.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'net.bytebuddy:byte-buddy:1.12.9'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
